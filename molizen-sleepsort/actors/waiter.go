// Code generated by Molizen. DO NOT EDIT.

// Package actors is a generated Molizen package.
package actors

import (
	sync "sync"

	actor "github.com/sanposhiho/molizen/actor"
	"github.com/sanposhiho/molizen/actorrepo/memory"
	context "github.com/sanposhiho/molizen/context"
	future "github.com/sanposhiho/molizen/future"
)

// WaiterActor is a actor of Waiter interface.
type WaiterActor struct {
	name     string
	lock     sync.Mutex
	internal Waiter
}

type Waiter interface {
	WaitFor(ctx context.Context, delaySec int)
	SetSelf(ctx context.Context, self *WaiterActor)
	Print(ctx context.Context)
}

// NewResult is the result type for New.
type NewResult struct {
	Actor WaiterActor
	// Error is an error that occurred during New.
	Error error
}

func New(ctx context.Context, internal Waiter, opts actor.Option) *future.Future[NewResult] {
	opts.Complete()
	// TODO: make it selectable for users.
	repo := memory.New[*WaiterActor]()
	context.RegisterActorRepo(ctx, repo)
	f := future.New[NewResult]()
	go func() {
		actor := WaiterActor{
			internal: internal,
			name:     opts.ActorName,
		}
		_, err := repo.Apply(&actor)
		f.Send(NewResult{Actor: actor, Error: err})
	}()

	return f
}

// ActorName returns the actor's name.
func (a *WaiterActor) ActorName() string {
	return a.name
}

// PrintResult is the result type for Print.
type PrintResult struct {
}

// Print actor base method.
func (a *WaiterActor) Print(ctx context.Context) *future.Future[PrintResult] {
	newctx := ctx.NewChildContext(a, a.lock.Lock, a.lock.Unlock)

	f := future.New[PrintResult]()
	go func() {
		a.lock.Lock()
		defer a.lock.Unlock()

		a.internal.Print(newctx)

		ret := PrintResult{}

		f.Send(ret)
	}()

	return f
}

// SetSelfResult is the result type for SetSelf.
type SetSelfResult struct {
}

// SetSelf actor base method.
func (a *WaiterActor) SetSelf(ctx context.Context, self *WaiterActor) *future.Future[SetSelfResult] {
	newctx := ctx.NewChildContext(a, a.lock.Lock, a.lock.Unlock)

	f := future.New[SetSelfResult]()
	go func() {
		a.lock.Lock()
		defer a.lock.Unlock()

		a.internal.SetSelf(newctx, self)

		ret := SetSelfResult{}

		f.Send(ret)
	}()

	return f
}

// WaitForResult is the result type for WaitFor.
type WaitForResult struct {
}

// WaitFor actor base method.
func (a *WaiterActor) WaitFor(ctx context.Context, delaySec int) *future.Future[WaitForResult] {
	newctx := ctx.NewChildContext(a, a.lock.Lock, a.lock.Unlock)

	f := future.New[WaitForResult]()
	go func() {
		a.lock.Lock()
		defer a.lock.Unlock()

		a.internal.WaitFor(newctx, delaySec)

		ret := WaitForResult{}

		f.Send(ret)
	}()

	return f
}
